name: Documentation

on:
  push:
    branches: [main]
    paths:
      - "**/*.hpp"
      - "**/*.cpp"
      - "docs/**"
      - ".github/workflows/docs.yml"
  workflow_dispatch:

env:
  CMAKE_VERSION: "3.28.3"

jobs:
  documentation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libboost-all-dev \
            libfmt-dev \
            libtbb-dev \
            libgtest-dev \
            libeigen3-dev \
            ninja-build \
            build-essential \
            cmake \
            doxygen \
            graphviz \
            curl \
            zip \
            unzip \
            tar \
            pkg-config

      # Install CMake
      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.CMAKE_VERSION }}

      # Verify doxygen is installed correctly
      - name: Check Doxygen version
        run: doxygen --version

      # Configure CMake with explicit Doxygen paths
      - name: Configure CMake
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_DOCS=ON \
            -DBUILD_TESTING=OFF \
            -DDOXYGEN_EXECUTABLE=$(which doxygen)

      # Use direct Doxygen command if CMake fails
      - name: Generate Documentation
        id: build_docs
        run: |
          # Try CMake first
          cmake --build build --target docs || true

          # Check if docs were generated
          if [ ! -d "build/docs/html" ] || [ -z "$(ls -A build/docs/html)" ]; then
            echo "CMake docs build failed or produced empty output, using direct Doxygen command"
            # Create a basic Doxyfile if needed
            if [ ! -f "docs/Doxyfile" ]; then
              mkdir -p docs
              doxygen -g docs/Doxyfile
              # Configure basic settings
              sed -i 's/PROJECT_NAME.*=.*/PROJECT_NAME = "Brezel Tensor Framework"/' docs/Doxyfile
              sed -i 's/OUTPUT_DIRECTORY.*=.*/OUTPUT_DIRECTORY = build\/docs/' docs/Doxyfile
              sed -i 's/INPUT.*=.*/INPUT = include/' docs/Doxyfile
              sed -i 's/RECURSIVE.*=.*/RECURSIVE = YES/' docs/Doxyfile
              sed -i 's/GENERATE_HTML.*=.*/GENERATE_HTML = YES/' docs/Doxyfile
              sed -i 's/GENERATE_LATEX.*=.*/GENERATE_LATEX = NO/' docs/Doxyfile
            fi
            
            # Run Doxygen directly
            mkdir -p build/docs
            doxygen docs/Doxyfile
          fi

          # Create basic index.html if docs still missing
          if [ ! -d "build/docs/html" ] || [ -z "$(ls -A build/docs/html)" ]; then
            echo "Creating minimal docs as fallback"
            mkdir -p build/docs/html
            cat > build/docs/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Brezel Tensor Framework Documentation</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; line-height: 1.6; padding: 2em; max-width: 800px; margin: 0 auto; color: #333; }
              h1 { color: #0366d6; }
              h2 { color: #24292e; margin-top: 2em; }
              code { background: #f6f8fa; padding: 0.2em 0.4em; border-radius: 3px; }
              pre { background: #f6f8fa; padding: 1em; border-radius: 5px; overflow-x: auto; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <h1>Brezel Tensor Framework</h1>
            <p>Modern C++20 Tensor Framework with CPU and CUDA support.</p>
            
            <h2>Overview</h2>
            <p>Brezel is a high-performance tensor computation library designed for modern C++20, 
            focusing on clean architecture, type safety, and performance.</p>
            
            <h2>Features</h2>
            <ul>
              <li>Efficient tensor operations</li>
              <li>Modern C++20 design patterns</li>
              <li>Clean and expressive API</li>
              <li>Comprehensive error handling</li>
              <li>Future CUDA support planned</li>
            </ul>
            
            <h2>Getting Started</h2>
            <p>Include the necessary headers:</p>
            <pre><code>#include &lt;brezel/tensor/tensor.hpp&gt;</code></pre>
            
            <p>Basic usage:</p>
            <pre><code>// Create tensors
          auto t1 = brezel::tensor::Tensor&lt;float&gt;::ones({2, 3});
          auto t2 = brezel::tensor::Tensor&lt;float&gt;::random_uniform({2, 3});

          // Perform operations
          auto t3 = t1 + t2;
          auto t4 = t3.matmul(t2.transpose());</code></pre>
            
            <h2>Documentation Status</h2>
            <p>This documentation is under development. For more details, please check the source code
            or visit the <a href="https://github.com/salgue441/nova">GitHub repository</a>.</p>
          </body>
          </html>
          EOF
          fi

          # Ensure a .nojekyll file exists
          touch build/docs/html/.nojekyll

          # List the generated files
          echo "Generated documentation files:"
          find build/docs/html -type f | sort

      - name: Deploy to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/html
          force_orphan: true
